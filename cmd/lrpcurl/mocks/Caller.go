// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	client "github.com/nyan233/littlerpc/core/client"
	mock "github.com/stretchr/testify/mock"
)

// Caller is an autogenerated mock type for the Caller type
type Caller struct {
	mock.Mock
}

// RawCall provides a mock function with given fields: service, opts, args
func (_m *Caller) RawCall(service string, opts []client.CallOption, args ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, service, opts)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string, []client.CallOption, ...interface{}) []interface{}); ok {
		r0 = rf(service, opts, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []client.CallOption, ...interface{}) error); ok {
		r1 = rf(service, opts, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewCaller creates a new instance of Caller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCaller(t mockConstructorTestingTNewCaller) *Caller {
	mock := &Caller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
