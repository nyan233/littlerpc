// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/nyan233/littlerpc/core/client"

	mock "github.com/stretchr/testify/mock"

	server "github.com/nyan233/littlerpc/core/server"
)

// LittleRpcReflectionProxy is an autogenerated mock type for the LittleRpcReflectionProxy type
type LittleRpcReflectionProxy struct {
	mock.Mock
}

// AllCodec provides a mock function with given fields: ctx, opts
func (_m *LittleRpcReflectionProxy) AllCodec(ctx context.Context, opts ...client.CallOption) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, ...client.CallOption) []string); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...client.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllInstance provides a mock function with given fields: ctx, opts
func (_m *LittleRpcReflectionProxy) AllInstance(ctx context.Context, opts ...client.CallOption) (map[string]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, ...client.CallOption) map[string]string); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...client.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllPacker provides a mock function with given fields: ctx, opts
func (_m *LittleRpcReflectionProxy) AllPacker(ctx context.Context, opts ...client.CallOption) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, ...client.CallOption) []string); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...client.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MethodArgumentType provides a mock function with given fields: ctx, serviceName, opts
func (_m *LittleRpcReflectionProxy) MethodArgumentType(ctx context.Context, serviceName string, opts ...client.CallOption) ([]server.ArgumentType, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []server.ArgumentType
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.CallOption) []server.ArgumentType); ok {
		r0 = rf(ctx, serviceName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.ArgumentType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.CallOption) error); ok {
		r1 = rf(ctx, serviceName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MethodTable provides a mock function with given fields: ctx, sourceName, opts
func (_m *LittleRpcReflectionProxy) MethodTable(ctx context.Context, sourceName string, opts ...client.CallOption) (*server.MethodTable, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, sourceName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *server.MethodTable
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.CallOption) *server.MethodTable); ok {
		r0 = rf(ctx, sourceName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.MethodTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.CallOption) error); ok {
		r1 = rf(ctx, sourceName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLittleRpcReflectionProxy interface {
	mock.TestingT
	Cleanup(func())
}

// NewLittleRpcReflectionProxy creates a new instance of LittleRpcReflectionProxy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLittleRpcReflectionProxy(t mockConstructorTestingTNewLittleRpcReflectionProxy) *LittleRpcReflectionProxy {
	mock := &LittleRpcReflectionProxy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
