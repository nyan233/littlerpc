package {{.PackageName}}

/*
    @Generator   : {{.GeneratorName}}
    @CreateTime  : {{.CreateTime}}
    @Author      : {{.Author}}
    @Comment     : code is auto generate do not edit
*/

import (
    {{range .ImportList}}{{.Name}} "{{.Path}}"%s{{end}}
)

var (
    _ caller{{.GenId}} = new(client.Client)
    _ {{.InterfaceName}} = new({{.TypeName}})
)


type caller{{.GenId}} interface {
    Request2(service string, opts []client.CallOption, reqCount int, args ...interface{}) error
}

type {{.InterfaceName}} interface {
    {{range .MethodList}}{{.}}%s{{end}}
}

type {{.TypeName}} struct {
    caller{{.GenId}}
}

func New{{.RealTypeName}}(b caller{{.GenId}}) {{.InterfaceName}} {
    proxy := new({{.TypeName}})
    c,ok := b.(caller{{.GenId}})
    if !ok {
        panic("the argument is not implemented caller")
    }
    proxy.caller{{.GenId}} = c
    return proxy
}
