// Code generated by protoc-gen-go-lrpc. DO NOT EDIT.
package nameserver

/*
   @Generator   : protoc-gen-go-lrpc
   @CreateTime  : 2025-07-28 01:19:35.510424 +0800 CST
   @Author      : NoAuthor
   @Comment     : code is auto generate do not edit
*/

import (
	"github.com/nyan233/littlerpc/core/client"
	"github.com/nyan233/littlerpc/core/common/context"
)

var (
	_ caller630a9b2f52f8458298da086c3a26ffa7 = new(client.Client)
	_ NameserverProxy                        = new(nameserverImpl)
)

type caller630a9b2f52f8458298da086c3a26ffa7 interface {
	Request2(service string, opts []client.CallOption, reqCount int, args ...interface{}) error
}

type NameserverProxy interface {
	AddNodeList(a0 *context.Context, a1 *AddNodeListReq, opts ...client.CallOption) (r0 *AddNodeListRsp, r1 error)
	GetNodeList(a0 *context.Context, a1 *GetNodeListReq, opts ...client.CallOption) (r0 *GetNodeListRsp, r1 error)
	DeleteNodeList(a0 *context.Context, a1 *DeleteNodeListReq, opts ...client.CallOption) (r0 *DeleteNodeListRsp, r1 error)
	GetNodeListInfo(a0 *context.Context, a1 *GetNodeListInfoReq, opts ...client.CallOption) (r0 *GetNodeListInfoRsp, r1 error)
	GetAllKey(a0 *context.Context, a1 *GetAllKeyReq, opts ...client.CallOption) (r0 *GetAllKeyRsp, r1 error)
}

type nameserverImpl struct {
	caller630a9b2f52f8458298da086c3a26ffa7
}

func NewNameserver(b caller630a9b2f52f8458298da086c3a26ffa7) NameserverProxy {
	proxy := new(nameserverImpl)
	c, ok := b.(caller630a9b2f52f8458298da086c3a26ffa7)
	if !ok {
		panic("the argument is not implemented caller")
	}
	proxy.caller630a9b2f52f8458298da086c3a26ffa7 = c
	return proxy
}

// 添加节点
func (p nameserverImpl) AddNodeList(a0, a1 *AddNodeListReq, opts ...client.CallOption) (r0 *AddNodeListRsp, r1 error) {
	r0 = new(AddNodeListRsp)
	r1 = p.Request2("Nameserver.AddNodeList", opts, 2, a0, a1, &r0)
	return
}

// 获取节点
func (p nameserverImpl) GetNodeList(a0, a1 *GetNodeListReq, opts ...client.CallOption) (r0 *GetNodeListRsp, r1 error) {
	r0 = new(GetNodeListRsp)
	r1 = p.Request2("Nameserver.GetNodeList", opts, 2, a0, a1, &r0)
	return
}

// 删除节点
func (p nameserverImpl) DeleteNodeList(a0, a1 *DeleteNodeListReq, opts ...client.CallOption) (r0 *DeleteNodeListRsp, r1 error) {
	r0 = new(DeleteNodeListRsp)
	r1 = p.Request2("Nameserver.DeleteNodeList", opts, 2, a0, a1, &r0)
	return
}

// 获取节点信息
// 可以比较version来判断是否更新
func (p nameserverImpl) GetNodeListInfo(a0, a1 *GetNodeListInfoReq, opts ...client.CallOption) (r0 *GetNodeListInfoRsp, r1 error) {
	r0 = new(GetNodeListInfoRsp)
	r1 = p.Request2("Nameserver.GetNodeListInfo", opts, 2, a0, a1, &r0)
	return
}

// 获取所有的key
func (p nameserverImpl) GetAllKey(a0, a1 *GetAllKeyReq, opts ...client.CallOption) (r0 *GetAllKeyRsp, r1 error) {
	r0 = new(GetAllKeyRsp)
	r1 = p.Request2("Nameserver.GetAllKey", opts, 2, a0, a1, &r0)
	return
}
